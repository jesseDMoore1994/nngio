syntax = "proto3";

package LibnngioProtobuf;

message Service {
    string name = 1; // Name of the service
    repeated string methods = 2; // List of RPC methods provided by the service
}

message ServiceDiscoveryRequest {
    // Empty message for requesting service discovery
}

message ServiceDiscoveryResponse {
    repeated Service services = 1; // List of available services
}

message RpcRequest {
    string service_name = 1; // Name of the service to call
    string method_name = 2; // Name of the method to call
    bytes payload = 3; // Serialized request payload
}

message RpcResponse {
    enum Status {
       Success = 0; // RPC call was successful
       ServiceNotFound = 1; // Service not found
       MethodNotFound = 2; // Method not found
       InvalidRequest = 3; // Request payload was invalid
       InternalError = 4; // Internal server error
    }
    Status status = 1; // Status of the RPC call
    bytes payload = 2; // Serialized response payload
    string error_message = 3; // Error message if the RPC call failed
}

message Raw {
    bytes data = 1; // Arbitrary binary data
}

enum TransportMode {
    Dial = 0; // Client mode
    Listen = 1; // Server mode
}
enum TransportProtocol {
    Pair = 0; // Pair protocol
    Req = 1; // Request protocol
    Rep = 2; // Reply protocol
    Pub = 3; // Publish protocol
    Sub = 4; // Subscribe protocol
    Push = 5; // Push protocol
    Pull = 6; // Pull protocol
    Surveyor = 7; // Surveyor protocol
    Respondent = 8; // Respondent protocol
    Bus = 9; // Bus protocol
}

message Transport {
    string name = 1; // Name of the transport (e.g., "rep-tcp1", "req-ipc1", etc.)
    TransportMode mode = 2; // Mode of the transport
    TransportProtocol proto = 3; // Protocol of the transport
    string url = 4; // Address to connect or bind to

    string tls_cert = 5; // TLS certificate for secure connections
    string tls_key = 6; // TLS private key for secure connections
    string tls_ca_cert = 7; // TLS CA certificate for secure connections

    uint32 recv_timeout_ms = 8; // Receive timeout in milliseconds
    uint32 send_timeout_ms = 9; // Send timeout in milliseconds
    uint64 max_msg_size = 10; // Maximum message size in bytes
}

message AddTransportRequest {
    Transport transport = 1;
}

message AddTransportResponse {
    // Empty message to acknowledge transport addition
}

message GetTransportsRequest {
    // Empty message for requesting transports
}

message GetTransportsResponse {
    repeated Transport transports = 1; // List of available transports
}

message RemoveTransportRequest {
    string name = 1; // Name of the transport to remove
}

message RemoveTransportResponse {
    // Empty message to acknowledge transport removal
}

message Forwarder {
    string name = 1; // Name of the forwarder
    repeated string inputs = 2; // Names of input transports
    repeated string outputs = 3; // Names of output transports
    bool running = 4; // Whether the forwarder is currently running
}

message LibnngioMessage {
    oneof msg {
        ServiceDiscoveryRequest service_discovery_request = 1;
        ServiceDiscoveryResponse service_discovery_response = 2;
        RpcRequest rpc_request = 3;
        RpcResponse rpc_response = 4;
        Raw raw = 5;
        AddTransportRequest add_transport_request = 6;
        AddTransportResponse add_transport_response = 7;
        GetTransportsRequest get_transports_request = 8;
        GetTransportsResponse get_transports_response = 9;
        RemoveTransportRequest remove_transport_request = 10;
        RemoveTransportResponse remove_transport_response = 11;
    }
    string uuid = 12; // Unique identifier for the message
}

// The Rpc from which all other RPCs are born... 
service RpcService {
    rpc CallRpc(RpcRequest) returns (RpcResponse);
}

service ServiceDiscoveryService {
    rpc GetServices(ServiceDiscoveryRequest) returns (ServiceDiscoveryResponse);
}

service TransportService {
    rpc AddTransport(AddTransportRequest) returns (AddTransportResponse);
    rpc GetTransports(GetTransportsRequest) returns (GetTransportsResponse);
    rpc RemoveTransport(RemoveTransportRequest) returns (RemoveTransportResponse);
}
