syntax = "proto3";

package LibnngioManagement;

// Common message types for management operations

// Transport configuration message
message TransportConfig {
    string name = 1;           // Unique name for the transport
    string mode = 2;           // "dial" or "listen"
    string protocol = 3;       // Protocol type (pair, req, rep, pub, sub, etc.)
    string url = 4;            // Transport URL
    string tls_cert = 5;       // Optional TLS certificate path
    string tls_key = 6;        // Optional TLS key path
    string tls_ca_cert = 7;    // Optional TLS CA certificate path
    int32 recv_timeout_ms = 8; // Receive timeout in milliseconds
    int32 send_timeout_ms = 9; // Send timeout in milliseconds
    uint64 max_msg_size = 10;  // Maximum message size
}

// Protobuf server configuration message
message ProtobufConfig {
    string name = 1;           // Unique name for the protobuf server
    string transport_name = 2; // Name of the associated transport
}

// Connection configuration message
message ConnectionConfig {
    string name = 1;              // Unique name for the connection
    string transport_name = 2;    // Transport to use
    string protobuf_name = 3;     // Protobuf server to connect to
}

// Protocol configuration message
message ProtocolConfig {
    string name = 1;          // Unique name for the protocol
    string description = 2;   // Protocol description
}

// Transport Management Service Messages
message AddTransportRequest {
    TransportConfig config = 1;
}

message AddTransportResponse {
    bool success = 1;
    string message = 2;
}

message RemoveTransportRequest {
    string name = 1;
}

message RemoveTransportResponse {
    bool success = 1;
    string message = 2;
}

message ListTransportsRequest {
    // Empty request
}

message ListTransportsResponse {
    repeated TransportConfig transports = 1;
}

message GetTransportRequest {
    string name = 1;
}

message GetTransportResponse {
    bool found = 1;
    TransportConfig config = 2;
}

// Protobuf Management Service Messages
message AddProtobufRequest {
    ProtobufConfig config = 1;
}

message AddProtobufResponse {
    bool success = 1;
    string message = 2;
}

message RemoveProtobufRequest {
    string name = 1;
}

message RemoveProtobufResponse {
    bool success = 1;
    string message = 2;
}

message ListProtobufsRequest {
    // Empty request
}

message ListProtobufsResponse {
    repeated ProtobufConfig protobufs = 1;
}

message GetProtobufRequest {
    string name = 1;
}

message GetProtobufResponse {
    bool found = 1;
    ProtobufConfig config = 2;
}

// Connection Management Service Messages
message AddConnectionRequest {
    ConnectionConfig config = 1;
}

message AddConnectionResponse {
    bool success = 1;
    string message = 2;
}

message RemoveConnectionRequest {
    string name = 1;
}

message RemoveConnectionResponse {
    bool success = 1;
    string message = 2;
}

message ListConnectionsRequest {
    // Empty request
}

message ListConnectionsResponse {
    repeated ConnectionConfig connections = 1;
}

message GetConnectionRequest {
    string name = 1;
}

message GetConnectionResponse {
    bool found = 1;
    ConnectionConfig config = 2;
}

// Protocol Management Service Messages
message AddProtocolRequest {
    ProtocolConfig config = 1;
}

message AddProtocolResponse {
    bool success = 1;
    string message = 2;
}

message RemoveProtocolRequest {
    string name = 1;
}

message RemoveProtocolResponse {
    bool success = 1;
    string message = 2;
}

message ListProtocolsRequest {
    // Empty request
}

message ListProtocolsResponse {
    repeated ProtocolConfig protocols = 1;
}

message GetProtocolRequest {
    string name = 1;
}

message GetProtocolResponse {
    bool found = 1;
    ProtocolConfig config = 2;
}

// Service definitions (for documentation purposes)
service TransportManagement {
    rpc AddTransport(AddTransportRequest) returns (AddTransportResponse);
    rpc RemoveTransport(RemoveTransportRequest) returns (RemoveTransportResponse);
    rpc ListTransports(ListTransportsRequest) returns (ListTransportsResponse);
    rpc GetTransport(GetTransportRequest) returns (GetTransportResponse);
}

service ProtobufManagement {
    rpc AddProtobuf(AddProtobufRequest) returns (AddProtobufResponse);
    rpc RemoveProtobuf(RemoveProtobufRequest) returns (RemoveProtobufResponse);
    rpc ListProtobufs(ListProtobufsRequest) returns (ListProtobufsResponse);
    rpc GetProtobuf(GetProtobufRequest) returns (GetProtobufResponse);
}

service ConnectionManagement {
    rpc AddConnection(AddConnectionRequest) returns (AddConnectionResponse);
    rpc RemoveConnection(RemoveConnectionRequest) returns (RemoveConnectionResponse);
    rpc ListConnections(ListConnectionsRequest) returns (ListConnectionsResponse);
    rpc GetConnection(GetConnectionRequest) returns (GetConnectionResponse);
}

service ProtocolManagement {
    rpc AddProtocol(AddProtocolRequest) returns (AddProtocolResponse);
    rpc RemoveProtocol(RemoveProtocolRequest) returns (RemoveProtocolResponse);
    rpc ListProtocols(ListProtocolsRequest) returns (ListProtocolsResponse);
    rpc GetProtocol(GetProtocolRequest) returns (GetProtocolResponse);
}
